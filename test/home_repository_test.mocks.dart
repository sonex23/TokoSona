// Mocks generated by Mockito 5.4.2 from annotations
// in toko_sona/test/home_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:toko_sona/core/networking/rest_client.dart' as _i2;
import 'package:toko_sona/core/service/hive_client.dart' as _i5;
import 'package:toko_sona/feature/home/product/product_entity.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RestClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestClient extends _i1.Mock implements _i2.RestClient {
  MockRestClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.ProductEntity>> getAllProducts() => (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductEntity>>.value(<_i4.ProductEntity>[]),
      ) as _i3.Future<List<_i4.ProductEntity>>);

  @override
  _i3.Future<List<String>> getAllCategories() => (super.noSuchMethod(
        Invocation.method(
          #getAllCategories,
          [],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);
}

/// A class which mocks [HiveClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveClient extends _i1.Mock implements _i5.HiveClient {
  @override
  _i3.Future<void> setupHive() => (super.noSuchMethod(
        Invocation.method(
          #setupHive,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<dynamic> getByKeyAndBox({
    required String? key,
    required String? box,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByKeyAndBox,
          [],
          {
            #key: key,
            #box: box,
          },
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> saveByKeyAndBox({
    required String? key,
    required String? box,
    required Object? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveByKeyAndBox,
          [],
          {
            #key: key,
            #box: box,
            #value: value,
          },
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> deleteAllValueByBox({required String? box}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllValueByBox,
          [],
          {#box: box},
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> deleteValueByKey({
    required String? key,
    required String? box,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteValueByKey,
          [],
          {
            #key: key,
            #box: box,
          },
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}
